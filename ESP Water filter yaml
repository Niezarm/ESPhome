esphome:
  name: water-filter

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:
  reboot_timeout : 0s

ota:
  password: <THIS WILL AUTO GENERATE WHEN ADD NEW DEVICE, USE YOURS>

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: <YOUR STATIC IP FOR THIS>
    gateway: <YOUR ROUTER IP>
    subnet: 255.255.255.0
    dns1: <YOUR DNS>
    dns2: <YOUR DNS>
  power_save_mode: none

  # Enable fallback hotspot (captive portal) in case wifi connection fails

  ap:
    ssid: "<YOUR OWN SSID NAME FOR THIS>"
    password: "<YOUR OWN PASSWORD FOR THIS>"
    ap_timeout: 2min

#ADS1115
i2c:
  sda: D2
  scl: D1
  scan: true
  id: bus_a
  
ads1115:
  - address: 0x48
  
captive_portal:

web_server:
  port: 80
  
globals:
  # time state
  - id: time_state
    type: int
  - id: myseconds
    type: int
  - id: myminutes
    type: int
    initial_value: "10"
  - id: mystart
    type: int  

time:
  - platform: homeassistant
    id: sntp_time
    on_time:
      # Every 10 seconds
      - seconds: /2
        then:
          lambda: |-
           id(time_state) += 1;
           if (id(time_state) > 10) {
              id(time_state) = 0;
           }

light:
  - platform: status_led
    name: "Water Filter LED State"
    pin:
     number: GPIO2
     inverted: true
    restore_mode: ALWAYS_ON
    

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Water Filter IP Address"
    ssid:
      name: "Water Filter SSID"
    bssid:
      name: "Water Filter BSSID"

sensor:
  - platform: wifi_signal
    name: "Water Filter WiFi Signal Sensor"
    update_interval: 60s
  - platform: uptime
    name: "Water Filter Uptime Sensor"
  - platform: homeassistant
    name: "Total Water Filter Usage"
    id: totalfilter_usage
    entity_id: sensor.waterfilter_usage_m3 
    accuracy_decimals: 2
    unit_of_measurement: 'm³'
    icon: mdi:counter
#Flow Sensor
  - platform: pulse_counter
    pin: D5
    unit_of_measurement: 'L/min'
    icon: mdi:waves-arrow-right
    accuracy_decimals: 3
    update_interval: 1s
    name: 'Water Filter Flow'
    id: water_filter_flow
    filters:
    - lambda: return (x * 0.00197);  
    total:
      unit_of_measurement: 'm³'
      name: 'Water Filter Total Last Boot'
      id: total_last_boot
      icon: mdi:counter
      device_class: gas
      accuracy_decimals: 3
      filters:
      - lambda: return (x * 0.00197 / 1000);
#Before  
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 6.144 
    name: "A0 Voltage - Before Pressure Transmitter"
    device_class: voltage
    state_class: "measurement"
    update_interval: 3s
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 6.144 
    name: "Before Filter Pressure - Bar"
    id: before_filter_bar
    device_class: pressure
    state_class: "measurement"
    icon: "mdi:gauge"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
            - 0.633 -> 0.34  
            - 0.862 -> 1.03
            - 1.11 -> 1.72
            - 1.47 -> 2.75
            - 1.63 -> 3.47
            - 2.02 -> 4.48
            - 2.01 -> 4.68
    unit_of_measurement: bar
    update_interval: 3s
    
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 6.144 
    name: "Before Filter Pressure - Psi"
    id: before_filter_psi
    device_class: pressure
    state_class: "measurement"
    icon: "mdi:gauge"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
            - 0.633 -> 5.0  
            - 0.862 -> 15.0
            - 1.11 -> 25.0
            - 1.47 -> 40.0
            - 1.63 -> 50.0
            - 2.02 -> 65.0
            - 2.01 -> 68.0
    unit_of_measurement: psi
    update_interval: 3s    
#After
  - platform: ads1115
    multiplexer: 'A1_GND'
    gain: 6.144 
    name: "A1 Voltage - After Pressure Transmitter"
    device_class: voltage
    state_class: "measurement"
    update_interval: 5s
  - platform: ads1115
    multiplexer: 'A1_GND'
    gain: 6.144 
    name: "After Filter Pressure - Bar"
    id: after_filter_bar
    device_class: pressure
    state_class: "measurement"
    icon: "mdi:gauge"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
            - 0.633 -> 0.34  
            - 0.862 -> 1.03
            - 1.11 -> 1.72
            - 1.47 -> 2.75
            - 1.63 -> 3.47
            - 2.02 -> 4.48
            - 2.01 -> 4.68
    unit_of_measurement: bar
    update_interval: 5s
    
  - platform: ads1115
    multiplexer: 'A1_GND'
    gain: 6.144 
    name: "After Filter Pressure - Psi"
    id: after_filter_psi
    device_class: pressure
    state_class: "measurement"
    icon: "mdi:gauge"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
            - 0.633 -> 5.0  
            - 0.862 -> 15.0
            - 1.11 -> 25.0
            - 1.47 -> 40.0
            - 1.63 -> 50.0
            - 2.02 -> 65.0
            - 2.01 -> 68.0
    unit_of_measurement: psi
    update_interval: 5s    
#Calculate
  - platform: template
    name: "Water Filter DeltaP - bar"
    device_class: pressure
    state_class: "measurement"
    lambda: return ( id(before_filter_bar).state - id(after_filter_bar).state );
    unit_of_measurement: bar
    update_interval: 5s    
    
  - platform: template
    name: "Water Filter DeltaP - psi"
    device_class: pressure
    state_class: "measurement"
    lambda: return ( id(before_filter_psi).state - id(after_filter_psi).state );
    unit_of_measurement: psi
    update_interval: 5s    

  - platform: template
    name: "Filter Percentage"
    state_class: "measurement"
    id: percent_usage
    icon: mdi:water-percent
    lambda: return ( (80 - id(totalfilter_usage).state) / 80 * 100 );
    unit_of_measurement: '%'
    update_interval: 1s    


#Display      
display:
    platform: tm1637
    id: tm1637_display1
    clk_pin: D6
    dio_pin: D7
    intensity: 1
    lambda: |-
     switch(id(time_state)) {
     case 0:
      it.print("PRES");
     break;
     case 1:
      it.printf(0, "%4.0f", id(before_filter_psi).state);
     break;
     case 2:
      it.print("FLO");
     break;
     case 3:
      it.printf(0, "%4.3f", id(water_filter_flow).state);
     break; 
     case 4:
      it.print("FILT");
     break;
     case 5:
      it.printf(0, "%4.0f", id(percent_usage).state);
     break;      
     case 6:
      it.print("CLOC");
     break;
     case 7:
      it.strftime("%H.%M", id(sntp_time).now());
     break;
     case 8:
      it.strftime("%H.%M", id(sntp_time).now());
     break;
     case 9:
      it.strftime("%H.%M", id(sntp_time).now());
     break;
     case 10:
      it.strftime("%H.%M", id(sntp_time).now());
     break;
     }
     
#Physical Button      
button:
  - platform: restart
    name: "Water Filter Restart"
binary_sensor:
  - platform: status
    name: "Water Filter Status"
